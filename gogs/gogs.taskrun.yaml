apiVersion: tekton.dev/v1beta1
kind: TaskRun
metadata:
  generateName: init-gogs-
  name: gogs-initialize-content
  annotations:
    argocd.argoproj.io/sync-wave: "4"
spec:
  taskSpec:
    params:
    - name: GOGS_USER
      type: string
      description: Gogs admin username
      default: gogs
    - name: GOGS_PASSWORD
      type: string
      description: Gogs admin password
      default: gogs
    stepTemplate:
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
    steps:
      - name: init-gogs
        image: quay.io/siamaksade/python-oc
        script: |
          #!/usr/bin/env python3
          import os
          import requests
          gogs_user = "$(params.GOGS_USER)"
          gogs_pwd = "$(params.GOGS_PASSWORD)"
          #webhookURL = "http://" + os.popen('oc get route webhook -o template --template="{{.spec.host}}"').read()
          gogsURL = "http://" + os.popen('oc -n ${NAMESPACE} get svc gogs -o template --template="{{.spec.clusterIP}}"').read() + ":3000"
          print(gogsURL)
          requests.get(gogsURL, timeout=60)
          from requests.adapters import HTTPAdapter
          from requests.packages.urllib3.util.retry import Retry
          retry_strategy = Retry(
              total=3,
              status_forcelist=[429, 500, 502, 503, 504],
              method_whitelist=["HEAD", "GET", "OPTIONS"]
          )
          adapter = HTTPAdapter(max_retries=retry_strategy)
          http = requests.Session()
          http.mount("https://", adapter)
          http.mount("http://", adapter)
          response = http.get(gogsURL)
          #
          # create admin user
          data_user = {
          'user_name': gogs_user,
          'password': gogs_pwd,
          'retype': gogs_pwd,
          'email': 'admin@gogs.com'
          }
          #
          resp = requests.post(url = gogsURL + "/user/sign_up", data = data_user)
          if resp.status_code != 200:
            print("Error creating Gogs admin (status code: {})".format(resp.status_code))
            print(resp.content)
          else:
            print("Created admin user {}:{}".format(gogs_user, gogs_pwd))
          #
          # create git repo car-deploy
          data_repo = '{"clone_addr": "https://github.com/rh-aiservices-bu/car-deploy", "uid": 1, "repo_name": "arc-deploy"}'
          headers = {'Content-Type': 'application/json'}
          resp = requests.post(url = gogsURL + "/api/v1/repos/migrate", headers = headers, auth = (gogs_user, gogs_pwd), data = data_repo)
          if resp.status_code != 200 and resp.status_code != 201:
            print("Error creating git repo (status code: {})".format(resp.status_code))
            print(resp.content)
            print("")
          else:
            print("Created git repo arc-deploy")
          #
          #
          # create git repo car-rest
          data_repo = '{"clone_addr": "https://github.com/rh-aiservices-bu/car-rest", "uid": 1, "repo_name": "arc-model"}'
          headers = {'Content-Type': 'application/json'}
          resp = requests.post(url = gogsURL + "/api/v1/repos/migrate", headers = headers, auth = (gogs_user, gogs_pwd), data = data_repo)
          if resp.status_code != 200 and resp.status_code != 201:
            print("Error creating git repo (status code: {})".format(resp.status_code))
            print(resp.content)
            print("")
          else:
            print("Created git repo arc-rest")
          #
          #
          # create git repo car-deploy
          data_repo = '{"clone_addr": "https://github.com/rh-aiservices-bu/car-app", "uid": 1, "repo_name": "arc-frontend"}'
          headers = {'Content-Type': 'application/json'}
          resp = requests.post(url = gogsURL + "/api/v1/repos/migrate", headers = headers, auth = (gogs_user, gogs_pwd), data = data_repo)
          if resp.status_code != 200 and resp.status_code != 201:
            print("Error creating git repo (status code: {})".format(resp.status_code))
            print(resp.content)
            print("")
          else:
            print("Created git repo arc-frontend")
          #
          #
          # create git repo car-deploy
          data_repo = '{"clone_addr": "https://github.com/rh-aiservices-bu/car-kafka", "uid": 1, "repo_name": "arc-kafka"}'
          headers = {'Content-Type': 'application/json'}
          resp = requests.post(url = gogsURL + "/api/v1/repos/migrate", headers = headers, auth = (gogs_user, gogs_pwd), data = data_repo)
          if resp.status_code != 200 and resp.status_code != 201:
            print("Error creating git repo (status code: {})".format(resp.status_code))
            print(resp.content)
            print("")
          else:
            print("Created git repo arc-kafka")
          #
          # configure webhook on car-deploy
          #          data_webhook = '{"type": "gogs", "config": { "url": "' + webhookURL + '", "content_type": "json"}, "events": ["push"], "active": true}'
          #          headers = {'Content-Type': 'application/json'}
          #          resp = requests.post(url = gogsURL + "/api/v1/repos/" + gogs_user + "/spring-petclinic/hooks",
          #                              headers = headers,
          #                              auth = (gogs_user, gogs_pwd),
          #                              data = data_webhook)
          #          if resp.status_code != 200 and resp.status_code != 201:
          #            print("Error configuring the webhook (status code: {})".format(resp.status_code))
          #            print(resp.content)
          #          else:
          #            print("Configured webhook: " + webhookURL)
          # create git repo car-rest
          #          data_repo = '{"clone_addr": "https://github.com/siamaksade/spring-petclinic-config.git", "uid": 1, "repo_name": "spring-petclinic-config"}'
          #          headers = {'Content-Type': 'application/json'}
          #          resp = requests.post(url = gogsURL + "/api/v1/repos/migrate", headers = headers, auth = (gogs_user, gogs_pwd), data = data_repo)
          #          if resp.status_code != 200 and resp.status_code != 201:
          #            print("Error creating git repo (status code: {})".format(resp.status_code))
          #            print(resp.content)
          #          else:
          #            print("Created git repo spring-petclinic-config")
          #          # configure webhook on spring-petclinic-config
          #          data_webhook = '{"type": "gogs", "config": { "url": "' + webhookURL + '", "content_type": "json"}, "events": ["push"], "active": true}'
          #          headers = {'Content-Type': 'application/json'}
          #          resp = requests.post(url = gogsURL + "/api/v1/repos/" + gogs_user + "/spring-petclinic-config/hooks",
          #                              headers = headers,
          #                              auth = (gogs_user, gogs_pwd),
          #                              data = data_webhook)
          #          if resp.status_code != 200 and resp.status_code != 201:
          #            print("Error configuring the webhook (status code: {})".format(resp.status_code))
          #            print(resp.content)
          #          else:
          #            print("Configured webhook: " + webhookURL)
          #          # create git repo spring-petclinic-gatling
          #          data_repo = '{"clone_addr": "https://github.com/siamaksade/spring-petclinic-gatling", "uid": 1, "repo_name": "spring-petclinic-gatling"}'
          #          headers = {'Content-Type': 'application/json'}
          #          resp = requests.post(url = gogsURL + "/api/v1/repos/migrate", headers = headers, auth = (gogs_user, gogs_pwd), data = data_repo)
          #          if resp.status_code != 200 and resp.status_code != 201:
          #            print("Error creating git repo (status code: {})".format(resp.status_code))
          #            print(resp.content)
          #          else:
          #            print("Created git repo spring-petclinic-gatling")